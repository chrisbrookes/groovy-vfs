buildscript {

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
    }
}

import org.asciidoctor.gradle.AsciidoctorTask

apply plugin : 'org.asciidoctor.convert'

ext {

    editCSV = { file,newText ->
        def lines = file.readLines()

        if(!version.endsWith('-SNAPSHOT')) {
            lines = lines.findAll {!it.endsWith('-SNAPSHOT') }
        }

        if(!lines.contains(version)) {
            logger.lifecycle "Adding '${newText}' to ${file}"
            file.withWriter { w ->
                w.println newText
                lines.each { w.println it }
            }
        }

    }
}

asciidoctor {

    sources {
        include 'product-documentation.adoc'
    }

    attributes revnumber: "${version}"
//    attributes dslSrcRoot : "${project(':groovy-vfs').projectDir}/src",
//        gradleSrcRoot : "${project(':gradle-plugin').projectDir}/src",
//        smbSrcRoot    : "${project(':smb-provider').projectDir}/src",
//        cloudSrcRoot  : "${project(':cloud-provider-core').projectDir}/src",
//        cmdlineSrcRoot: "${project(':cmdline').projectDir}/src"
}


task landingPage( type : AsciidoctorTask ) {

    inputs.files 'src/docs/landingPage/docs.csv'
    inputs.files 'src/docs/landingPage/api.csv'

    sourceDir 'src/docs/landingPage'
    outputDir "${buildDir}/landingPage"
    separateOutputDirs = false

    sources {
        include 'index.adoc'
    }

    resources {
        from 'stylesheets'
        from 'images'
    }

    mustRunAfter 'updateversionDoc'
}


task installDocs( type : Copy ) {

    with copySpec {
        from new File(asciidoctor.outputDir,'html5')
        into "${version}/docs"
    }

    from landingPage.outputDir

    into websitePublishFolder

    dependsOn asciidoctor,landingPage

    doLast {
        logger.lifecycle "Files copied to website repo. To publish, change to ${websitePublishFolder} and commit and push from there."
    }

    onlyIf {!version.endsWith('-SNAPSHOT')}
}


task updateversionDoc {
    description 'Updates the local CSV version file'
    outputs.file 'src/docs/landingPage/docs.csv'

    outputs.upToDateWhen { t ->
        t.outputs.files.singleFile.text.readLines().contains(version) &&
            !version.endsWith('-SNAPSHOT') && !t.outputs.files.singleFile.text.contains('-SNAPSHOT')
    }

    doLast {
        editCSV outputs.files.singleFile,"link:${version}/docs/product-documentation.html[${version}]"
    }
}


//task updateApiVersionDoc {
//    description 'Updates the local CSV API versions file'
//    outputs.file 'src/docs/landingPage/api.csv'
//
////    outputs.upToDateWhen { t ->
////        t.outputs.files.singleFile.text.readLines().contains(version) &&
////            !version.endsWith('-SNAPSHOT') && !t.outputs.files.singleFile.text.contains('-SNAPSHOT')
////    }
//}

//updateApiVersionDoc << {
//    rootProject.modulesWithGroovyDoc.each {
//
//    }
//    editCSV outputs.files.singleFile,"${version},link:"
//
//}