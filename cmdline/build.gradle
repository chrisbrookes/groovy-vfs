// ============================================================================
// (C) Copyright Schalk W. Cronje 2012 - 2014
//
// This software is licensed under the Apache License 2.0
// See http://www.apache.org/licenses/LICENSE-2.0 for license details
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and limitations under the License.
// ============================================================================

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.1'
    }
}


apply plugin : 'application'
apply plugin : 'org.asciidoctor.gradle.asciidoctor'

group = 'org.ysb33r.groovy'
archivesBaseName = 'cmdline-vfs'
mainClassName = 'org.ysb33r.groovy.vfs.app.Run'
applicationName = 'vfs'
applicationDefaultJvmArgs=["-Dvfs.scriptname=${applicationName}"]

ext {
    moduleName = 'vfs'
    bintrayDescription = 'A command-line utility for file operations on various local & remote virtual filesystems'
    bintrayTags = ['groovy', 'vfs']
    bintrayRepo = 'nanook'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'VFS Command-line Utility', 'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:${groovyVer}"
    compile 'commons-cli:commons-cli:1.2'
    runtime 'commons-io:commons-io:2.4'
    runtime 'commons-net:commons-net:3.+'
    runtime 'commons-httpclient:commons-httpclient:3.1'
    runtime 'org.slf4j:slf4j-simple:1.7.5'
    runtime 'com.jcraft:jsch:0.1.48'
    compile project(':dsl')
    runtime project(':smb-provider')
    runtime project(':cloud-provider-core')
}

test {
    systemProperties TESTFSREADROOT : "${projectDir}/src/test/resources"
    systemProperties TESTFSWRITEROOT : "${buildDir}/tmp/test/cmdline-vfs"
}

asciidoctor {
    backends 'html5'
    options eruby: 'erubis'

    attributes  icons: 'font', 'source-highlighter': 'prettify',
                experimental: true, copycss: true,
                idprefix: '',
                idseparator: '-',
                revnumber: version

}

distTar {
    extension = 'tgz'
    compression = Compression.GZIP
    from(new File(buildDir,'asciidoc')) {
        into "${applicationName}-${version}/docs"
    }

    dependsOn asciidoctor
}

distZip {
    from(new File(buildDir,'asciidoc')) {
        into "${applicationName}-${version}/docs"
    }

    dependsOn asciidoctor

}

task sourcesZip(type: Zip, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    baseName = applicationName
}



// TODO: ISSUE #20 - Generate man pages from asciidocs

apply from : '../gradle/publish.gradle'

uploadArchives {
    sources distZip.outputs.files
    sources distTar.outputs.files
    sources sourcesZip.outputs.files

    dependsOn distZip, distTar, sourcesZip
}

//bintray {
//    filesSpec { //When uploading any arbitrary files ('filesSpec' is a standard Gradle CopySpec)
//        from distZip.outputs.files
//        from distTar.outputs.files
//        from sourcesZip.outputs.files
////        into 'standalone_files/level1'
////        rename '(.+)\\.(.+)', '$1-suffix.$2'
//    }
//}