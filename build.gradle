// ============================================================================
// (C) Copyright Schalk W. Cronje 2013-2014
//
// This software is licensed under the Apache License 2.0
// See http://www.apache.org/licenses/LICENSE-2.0 for license details
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and limitations under the License.
//
// ============================================================================

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
//        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.1.0'
        classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.12.1'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
//            classpath 'org.ysb33r.gradle:bintray:1.6'
//            classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.0.1'
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.0'
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

allprojects {

    ext {
        versionModifier = 'SNAPSHOT'
        versionNumber   = '2.0'

        subprojectGroups = [
            groovyLib : [
                'core-vfs',
                'groovy-vfs'
            ],
            
            publishGroovyDoc : [
                'core-vfs',
                'groovy-vfs',
//            'gradle-plugin',
//            'cloud-provider-core',
//            'smb-provider'
            ],
            lgplLicensed : [
                'test-server-smb'
            ],
            providers : [
                'provider-core',
                'ram-provider'
            ],
            testServers : [
                'test-server-ftp',
//                'test-server-smb'
            ],
        ]
    }
    version = versionNumber + (versionModifier.size() ? "-${versionModifier}": '')
}

subprojects {


//    apply plugin: 'nebula.provided-base'
    apply plugin: 'com.github.hierynomus.license'

    ext {
        asciidocVer      = '1.5.3'
        groovyVer        = '2.4.12'
        spockVer         = '1.1-groovy-2.4'
        spockReportsVer  = '1.2.12'
        kotlinVer        = '1.0'
        ftpserverVer     = '1.0.6'
        slf4jVer         = '1.7.5'
        bintrayRepo      = 'grysb33r'
        bintrayUser      = 'ysb33r'
        bintrayLicense   = 'Apache-2.0'
        bintrayAttributes= [:]
        websitePublishFolder = new File(rootProject.projectDir,'website')
    }

    repositories {
        jcenter()
    }


    license {
        strictCheck = true
        ignoreFailures = false
        mapping {
            groovy = 'SLASHSTAR_STYLE'
            java = 'SLASHSTAR_STYLE'
        }
        ext.year = '2013-2017'
        excludes(['**/*.ad', '**/*.asciidoc', '**/*.adoc', '**/*.md','**/*.properties', '**/*.txt', '**/*.bz2'])
    }
}

configure(subprojects.findAll { subprojectGroups.lgplLicensed.contains(it.name) } ) {
    license {
        header = rootProject.file('config/lgpl2-header')
    }
}

configure(subprojects.findAll { !subprojectGroups.lgplLicensed.contains(it.name) } ) {
    license {
        header = rootProject.file('config/apache-header')
    }
}

//configure(subprojects.findAll { subprojectGroups.providers.contains(it.name) } ) { cfgProject ->
//
//    apply plugin : 'java'
//
//    group = "org.ysb33r.nio"
//
//    sourceCompatibility = 1.8
//    targetCompatibility = 1.8
//
//    dependencies {
//        provided "org.codehaus.groovy:groovy-all:${groovyVer}"
//        testCompile ("org.spockframework:spock-core:${spockVer}") {
//            exclude module : 'groovy-all'
//        }
//        testCompile( "com.athaydes:spock-reports:${spockReportsVer}" ) {
//            transitive = false
//        }
//        testRuntime "org.slf4j:slf4j-simple:${slf4jVer}"
//        testCompile 'cglib:cglib-nodep:3.2.3'
//        testCompile 'org.objenesis:objenesis:2.4'
//
//        if(cfgProject.name != 'provider-core') {
//            compile project(':provider-core')
//        }
//    }
//
//    task sourcesJar(type: Jar, dependsOn: classes) {
//        classifier = 'sources'
//        from sourceSets.main.allSource
//    }
//
//    task javadocJar(type: Jar) {
//        description "An archive of the JavaDocs for Maven Central"
//        classifier "javadoc"
//        from javadoc
//    }
//
//    artifacts {
//        archives sourcesJar, javadocJar
//    }
//
//
//}

//configure(subprojects.findAll { ! ['jlan','test-servers','docs'].contains(it.name) } ) {
//
//    apply plugin: 'groovy'
//    apply plugin: 'maven'
//    apply plugin: 'com.github.hierynomus.license'
//
//    sourceCompatibility = 1.7
//    targetCompatibility = 1.7
//
//    plugins.withType(JavaPlugin) {
//
//        project.tasks.withType(JavaCompile) { task ->
//            task.sourceCompatibility = project.sourceCompatibility
//            task.targetCompatibility = project.targetCompatibility
//        }
//
//        project.tasks.withType(GroovyCompile) { task ->
//            task.sourceCompatibility = project.sourceCompatibility
//            task.targetCompatibility = project.targetCompatibility
//        }
//    }
//
//    dependencies {
//        compile 'org.codehaus.groovy.subprojectGroups.http-builder:http-builder:0.7+'
//        compile ("org.apache.commons:commons-vfs2:${vfsVersion}") {
//            exclude group:'org.apache.maven.scm'
//        }
//        compile 'org.apache.commons:commons-compress:1.9'
//        testCompile 'org.apache.ftpserver:ftpserver-core:1.0.6'
//        testCompile 'commons-io:commons-io:2.4'
//        testCompile 'commons-net:commons-net:3.+'
//        testRuntime 'commons-httpclient:commons-httpclient:3.1'
//        testRuntime "org.slf4j:slf4j-simple:${slf4jVer}"
//
//
//        testCompile ('org.spockframework:spock-core:1.0-groovy-2.3') {
//            exclude module : 'groovy-all'
//        }
//
//    }
//
//    task sourcesJar(type: Jar, dependsOn: classes) {
//        classifier = 'sources'
//        from sourceSets.main.allSource
//    }
//
//    task javadocJar(type: Jar) {
//        description "An archive of the JavaDocs for Maven Central"
//        classifier "javadoc"
//        from javadoc
//    }
//
//    artifacts {
//        archives sourcesJar, javadocJar
//    }
//
//    license {
//        header = rootProject.file('config/apache-header')
//        strictCheck = true
//        ignoreFailures = false
//        mapping {
//            groovy ='SLASHSTAR_STYLE'
//        }
//        ext.year = '2013-2016'
//        excludes(['**/*.ad', '**/*.asciidoc', '**/*.adoc', '**/*.md','**/*.properties', '**/*.txt', '**/*.bz2'])
//    }
//}

configure( subprojects.findAll { subprojectGroups.testServers.contains(it.name) } ) {

    apply plugin: 'groovy'
    apply plugin: 'com.github.hierynomus.license'

    dependencies {
        compile group: 'org.codehaus.groovy',   name: 'groovy', version: groovyVer
    }
}

configure( subprojects.findAll { subprojectGroups.groovyLib.contains(it.name) } ) {

    apply plugin : 'groovy'
    apply plugin: 'com.github.hierynomus.license'

    dependencies {
        compile group: 'org.codehaus.groovy',   name: 'groovy', version: groovyVer
        compile "org.slf4j:slf4j-api:${slf4jVer}"

        testCompile ("org.spockframework:spock-core:${spockVer}") {
            exclude module : 'groovy-all'
        }

        testCompile( "com.athaydes:spock-reports:${spockReportsVer}" ) {
            transitive = false
        }

        testRuntime "org.codehaus.groovy:groovy-xml:${groovyVer}"
        testRuntime "org.codehaus.groovy:groovy-json:${groovyVer}"
        testRuntime "org.slf4j:slf4j-simple:${slf4jVer}"

        if( project.name != 'core-vfs') {
            compile project(":core-vfs")
        }

        for( String service : subprojectGroups.testServers) { 
            testCompile project(":${service}")
        }
    }

    test {
        systemProperties TESTFSREADROOT  : "${projectDir}"
        systemProperties TESTFSWRITEROOT : "${buildDir}"
    }

}

configure( subprojects.findAll { subprojectGroups.publishGroovyDoc.contains(it.name) } ) {

    apply plugin : 'groovy'

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        description "An archive of the JavaDocs for Maven Central"
        classifier "javadoc"
        from javadoc
    }

    artifacts {
        archives sourcesJar, javadocJar
    }

    task installDocs( type : Copy ) {
        group 'documentation'
        description 'Copy groovydocs to an install directory'
        dependsOn 'groovydoc'

        from groovydoc

        into { "${websitePublishFolder}/${version}/api/${project.name}" }

        dependsOn groovydoc
    }
}

