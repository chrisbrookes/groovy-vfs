// ============================================================================
// (C) Copyright Schalk W. Cronje 2014
//
// This software is licensed under the Apache License 2.0
// See http://www.apache.org/licenses/LICENSE-2.0 for license details
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and limitations under the License.
//
// ============================================================================

apply plugin: 'org.ysb33r.vfs'
apply plugin : LifecycleBasePlugin

configurations {
    jlan
//    jlanInternal
}

//dependencies {
////    jlanInternal "xerces:xercesImpl:${xercesVer}"
//}

ext {
    unpackDir = new File(buildDir,'alfresco')
}

task download {

    ext {
        archive = 'alfresco-jlan-source_5_0_0.zip'
    }

    doLast {

        if (!buildDir.exists()) {
            mkdir buildDir
        }
        vfs {
            options {
                http {
                    followRedirect true
                }
            }
            cp "http://download.sourceforge.net/project/alfresco/JLAN/Alfresco%20JLAN%205.0/${property('archive')}",
                buildDir,
                overwrite: true
        }
    }

    onlyIf {
        !new File(buildDir,property('archive')).exists()
    }
}

task unpack ( type : Copy ) {
    from zipTree(new File(buildDir,download.property('archive')))
    into unpackDir
    dependsOn download
}

task buildJlan {
    inputs.file new File(unpackDir,'build.xml')
    outputs.file new File(unpackDir,'jars/alfresco-jlan.jar')
    outputs.file new File(unpackDir,'libs/cryptix-jce-provider.jar')
    dependsOn unpack

    onlyIf {
        !new File(unpackDir,'jars/alfresco-jlan.jar').exists() &&
        !new File(unpackDir,'libs/cryptix-jce-provider.jar').exists()
    }

    doLast {
        def buildxml = new File(unpackDir,'build.xml')
        ant.antProject.setBaseDir(unpackDir)
        ant.antProject.setUserProperty(org.apache.tools.ant.MagicNames.ANT_FILE, buildxml.absolutePath)
        org.apache.tools.ant.ProjectHelper.configureProject(ant.antProject,buildxml)
        ant.antProject.executeTarget('createJar')
    }
}

artifacts {
    jlan file("${unpackDir}/jars/alfresco-jlan.jar"), {
        builtBy buildJlan
    }
    jlan file("${unpackDir}/libs/cryptix-jce-provider.jar"), {
        builtBy buildJlan
    }
}

build.dependsOn buildJlan
